<<<<<<< HEAD
INSERT OR REPLACE INTO t1 VALUES(2, 'insert or replace'); ----> PARSING_ERROR

REPLACE INTO t1 VALUES(2, 'replace'); ----> PARSING_ERROR

INSERT OR REPLACE INTO t1 VALUES(3, 'insert or replace (new)'); ----> PARSING_ERROR

REPLACE INTO t1 VALUES(4, 'replace (new)'); ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r2 DELETE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r3 INSERT ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r4 UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r5 AFTER DELETE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r6 AFTER INSERT ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r7 AFTER UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r8 BEFORE DELETE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r9 BEFORE INSERT ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r10 BEFORE UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

CREATE TEMP VIEW view2 AS SELECT x FROM t1 WHERE x>0; ----> PARSING_ERROR

CREATE TEMPORARY VIEW view3 AS SELECT x FROM t1 WHERE x>0; ----> PARSING_ERROR

DROP VIEW view1; ----> PARSING_ERROR

DROP VIEW view2; ----> PARSING_ERROR

DROP VIEW view3; ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

DROP INDEX t1i1; ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

REINDEX t1i1; ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END; ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE 1 IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE 1.0 IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE '1' IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE NULL IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE 1 NOT IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE 1.0 NOT IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE '1' NOT IN (); ----> PARSING_ERROR

SELECT 1 FROM t1 WHERE NULL NOT IN (); ----> PARSING_ERROR

CREATE INDEX t1i1 ON t1(x); ----> PARSING_ERROR

SELECT total(DISTINCT x) FROM t1; ----> PARSING_ERROR

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT total(DISTINCT y) FROM t1; ----> PARSING_ERROR

SELECT group_concat(DISTINCT y) FROM t1; ----> PARSING_ERROR

SELECT group_concat(x) FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT group_concat(x,':') FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT group_concat(x) FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED; ----> PARSING_ERROR

SELECT x FROM t1 WHERE x NOT NULL ORDER BY x; ----> PARSING_ERROR

SELECT DISTINCT x FROM t1 WHERE x NOT NULL ORDER BY x; ----> PARSING_ERROR

SELECT x FROM t1 WHERE x NOT NULL ORDER BY x; ----> PARSING_ERROR

SELECT DISTINCT x FROM t1 WHERE x NOT NULL ORDER BY x; ----> PARSING_ERROR

SELECT total(DISTINCT x) FROM t1; ----> PARSING_ERROR

SELECT total(DISTINCT x) FROM t1 WHERE y='null'; ----> PARSING_ERROR

SELECT total(DISTINCT x) FROM t1; ----> PARSING_ERROR

INSERT INTO t1 VALUES(1<<63,'true'); ----> PARSING_ERROR

INSERT INTO t1 VALUES(1<<63,'true'); ----> PARSING_ERROR

SELECT total(DISTINCT x) FROM t1; ----> PARSING_ERROR
=======
INSERT OR REPLACE INTO t1 VALUES(2, 'insert or replace');

REPLACE INTO t1 VALUES(2, 'replace');

INSERT OR REPLACE INTO t1 VALUES(3, 'insert or replace (new)');

REPLACE INTO t1 VALUES(4, 'replace (new)');

CREATE INDEX t1i1 ON t1(x);

CREATE INDEX t1i1 ON t1(x);

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r2 DELETE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r3 INSERT ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r4 UPDATE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r5 AFTER DELETE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r6 AFTER INSERT ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r7 AFTER UPDATE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r8 BEFORE DELETE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r9 BEFORE INSERT ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r10 BEFORE UPDATE ON t1 BEGIN SELECT 1; END;

CREATE INDEX t1i1 ON t1(x);

CREATE TEMP VIEW view2 AS SELECT x FROM t1 WHERE x>0;

CREATE TEMPORARY VIEW view3 AS SELECT x FROM t1 WHERE x>0;

DROP VIEW view1;

DROP VIEW view2;

DROP VIEW view3;

CREATE INDEX t1i1 ON t1(x);

CREATE INDEX t1i1 ON t1(x);

DROP INDEX t1i1;

CREATE INDEX t1i1 ON t1(x);

REINDEX t1i1;

CREATE INDEX t1i1 ON t1(x);

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END;

CREATE TRIGGER t1r1 UPDATE ON t1 BEGIN SELECT 1; END;

SELECT 1 FROM t1 WHERE 1 IN ();

SELECT 1 FROM t1 WHERE 1.0 IN ();

SELECT 1 FROM t1 WHERE '1' IN ();

SELECT 1 FROM t1 WHERE NULL IN ();

SELECT 1 FROM t1 WHERE 1 NOT IN ();

SELECT 1 FROM t1 WHERE 1.0 NOT IN ();

SELECT 1 FROM t1 WHERE '1' NOT IN ();

SELECT 1 FROM t1 WHERE NULL NOT IN ();

CREATE INDEX t1i1 ON t1(x);

SELECT total(DISTINCT x) FROM t1;

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED;

SELECT total(DISTINCT y) FROM t1;

SELECT group_concat(DISTINCT y) FROM t1;

SELECT group_concat(x) FROM t1 NOT INDEXED;

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED;

SELECT group_concat(x,':') FROM t1 NOT INDEXED;

SELECT group_concat(x) FROM t1 NOT INDEXED;

SELECT group_concat(DISTINCT x) FROM t1 NOT INDEXED;

SELECT x FROM t1 WHERE x NOT NULL ORDER BY x;

SELECT DISTINCT x FROM t1 WHERE x NOT NULL ORDER BY x;

SELECT x FROM t1 WHERE x NOT NULL ORDER BY x;

SELECT DISTINCT x FROM t1 WHERE x NOT NULL ORDER BY x;

SELECT total(DISTINCT x) FROM t1;

SELECT total(DISTINCT x) FROM t1 WHERE y='null';

SELECT total(DISTINCT x) FROM t1;

INSERT INTO t1 VALUES(1<<63,'true');

INSERT INTO t1 VALUES(1<<63,'true');

SELECT total(DISTINCT x) FROM t1;

===============================================
RESULTS
===============================================
1268 expressions found, 1210 expressions successfully parsed.
95.43% of sqllogictest expressions were successfully parsed.
