/* Generated By:JavaCC: Do not edit this line. SqlParserVisitor.h Version 7.0.10 */
#ifndef SQLPARSERVISITOR_H
#define SQLPARSERVISITOR_H

#include "JavaCC.h"
#include "SqlParserTree.h"
namespace commonsql {
namespace parser {
class SqlParserVisitor
{
  public:
  virtual void  visit(const SimpleNode *node, void * data) = 0;
  virtual void  visitCompilationUnit(const CompilationUnit *node, void * data) = 0;
  virtual void  visitUnaryExpression(const UnaryExpression *node, void * data) = 0;
  virtual void  visitUnsignedNumericLiteral(const UnsignedNumericLiteral *node, void * data) = 0;
  virtual void  visitCharStringLiteral(const CharStringLiteral *node, void * data) = 0;
  virtual void  visitDateLiteral(const DateLiteral *node, void * data) = 0;
  virtual void  visitTimeLiteral(const TimeLiteral *node, void * data) = 0;
  virtual void  visitTimestampLiteral(const TimestampLiteral *node, void * data) = 0;
  virtual void  visitIntervalLiteral(const IntervalLiteral *node, void * data) = 0;
  virtual void  visitBooleanLiteral(const BooleanLiteral *node, void * data) = 0;
  virtual void  visitUnsupported(const Unsupported *node, void * data) = 0;
  virtual void  visitIdentifier(const Identifier *node, void * data) = 0;
  virtual void  visitTableName(const TableName *node, void * data) = 0;
  virtual void  visitSchemaName(const SchemaName *node, void * data) = 0;
  virtual void  visitCatalogName(const CatalogName *node, void * data) = 0;
  virtual void  visitSchemaQualifiedName(const SchemaQualifiedName *node, void * data) = 0;
  virtual void  visitPredefinedType(const PredefinedType *node, void * data) = 0;
  virtual void  visitRowType(const RowType *node, void * data) = 0;
  virtual void  visitArrayType(const ArrayType *node, void * data) = 0;
  virtual void  visitFieldDefinition(const FieldDefinition *node, void * data) = 0;
  virtual void  visitParenthesizedExpression(const ParenthesizedExpression *node, void * data) = 0;
  virtual void  visitBuiltinValue(const BuiltinValue *node, void * data) = 0;
  virtual void  visitNullLiteral(const NullLiteral *node, void * data) = 0;
  virtual void  visitArrayLiteral(const ArrayLiteral *node, void * data) = 0;
  virtual void  visitQualifiedName(const QualifiedName *node, void * data) = 0;
  virtual void  visitGroupingOperation(const GroupingOperation *node, void * data) = 0;
  virtual void  visitWindowFunction(const WindowFunction *node, void * data) = 0;
  virtual void  visitRowNumber(const RowNumber *node, void * data) = 0;
  virtual void  visitRankFunction(const RankFunction *node, void * data) = 0;
  virtual void  visitNtileFunction(const NtileFunction *node, void * data) = 0;
  virtual void  visitLeadOrLag(const LeadOrLag *node, void * data) = 0;
  virtual void  visitNullTreatment(const NullTreatment *node, void * data) = 0;
  virtual void  visitFirstOrLastValueFunction(const FirstOrLastValueFunction *node, void * data) = 0;
  virtual void  visitNullIf(const NullIf *node, void * data) = 0;
  virtual void  visitCoalesce(const Coalesce *node, void * data) = 0;
  virtual void  visitCaseExpression(const CaseExpression *node, void * data) = 0;
  virtual void  visitWhenClause(const WhenClause *node, void * data) = 0;
  virtual void  visitElseClause(const ElseClause *node, void * data) = 0;
  virtual void  visitWhenOperand(const WhenOperand *node, void * data) = 0;
  virtual void  visitSearchedCaseOperand(const SearchedCaseOperand *node, void * data) = 0;
  virtual void  visitCastEpression(const CastEpression *node, void * data) = 0;
  virtual void  visitFieldReference(const FieldReference *node, void * data) = 0;
  virtual void  visitFunctionCall(const FunctionCall *node, void * data) = 0;
  virtual void  visitAggregationFunction(const AggregationFunction *node, void * data) = 0;
  virtual void  visitUnused(const Unused *node, void * data) = 0;
  virtual void  visitLambda(const Lambda *node, void * data) = 0;
  virtual void  visitArrayElement(const ArrayElement *node, void * data) = 0;
  virtual void  visitAdd(const Add *node, void * data) = 0;
  virtual void  visitSubtract(const Subtract *node, void * data) = 0;
  virtual void  visitMultiply(const Multiply *node, void * data) = 0;
  virtual void  visitDivide(const Divide *node, void * data) = 0;
  virtual void  visitMod(const Mod *node, void * data) = 0;
  virtual void  visitTimeZoneField(const TimeZoneField *node, void * data) = 0;
  virtual void  visitConcatenation(const Concatenation *node, void * data) = 0;
  virtual void  visitAdditiveEpression(const AdditiveEpression *node, void * data) = 0;
  virtual void  visitMultiplicativeExpression(const MultiplicativeExpression *node, void * data) = 0;
  virtual void  visitOrExpression(const OrExpression *node, void * data) = 0;
  virtual void  visitAndExpression(const AndExpression *node, void * data) = 0;
  virtual void  visitNotExpression(const NotExpression *node, void * data) = 0;
  virtual void  visitIsExpression(const IsExpression *node, void * data) = 0;
  virtual void  visitRowExpression(const RowExpression *node, void * data) = 0;
  virtual void  visitRowExression(const RowExression *node, void * data) = 0;
  virtual void  visitValues(const Values *node, void * data) = 0;
  virtual void  visitTableExpression(const TableExpression *node, void * data) = 0;
  virtual void  visitFromClause(const FromClause *node, void * data) = 0;
  virtual void  visitCommaJoin(const CommaJoin *node, void * data) = 0;
  virtual void  visitJoin(const Join *node, void * data) = 0;
  virtual void  visitTableSample(const TableSample *node, void * data) = 0;
  virtual void  visitAliasedTable(const AliasedTable *node, void * data) = 0;
  virtual void  visitAlias(const Alias *node, void * data) = 0;
  virtual void  visitUnnest(const Unnest *node, void * data) = 0;
  virtual void  visitColumnNames(const ColumnNames *node, void * data) = 0;
  virtual void  visitOnClause(const OnClause *node, void * data) = 0;
  virtual void  visitUsingClause(const UsingClause *node, void * data) = 0;
  virtual void  visitWhereClause(const WhereClause *node, void * data) = 0;
  virtual void  visitGroupbyClause(const GroupbyClause *node, void * data) = 0;
  virtual void  visitRollup(const Rollup *node, void * data) = 0;
  virtual void  visitCube(const Cube *node, void * data) = 0;
  virtual void  visitGroupingSets(const GroupingSets *node, void * data) = 0;
  virtual void  visitHavingClause(const HavingClause *node, void * data) = 0;
  virtual void  visitWindowSpecification(const WindowSpecification *node, void * data) = 0;
  virtual void  visitPartitionByClause(const PartitionByClause *node, void * data) = 0;
  virtual void  visitOrderByClause(const OrderByClause *node, void * data) = 0;
  virtual void  visitWindowFrameUnits(const WindowFrameUnits *node, void * data) = 0;
  virtual void  visitWindowFrameExtent(const WindowFrameExtent *node, void * data) = 0;
  virtual void  visitUnboundedPreceding(const UnboundedPreceding *node, void * data) = 0;
  virtual void  visitCurrentRow(const CurrentRow *node, void * data) = 0;
  virtual void  visitWindowFramePreceding(const WindowFramePreceding *node, void * data) = 0;
  virtual void  visitWindowFrameBetween(const WindowFrameBetween *node, void * data) = 0;
  virtual void  visitUnboundedFollowing(const UnboundedFollowing *node, void * data) = 0;
  virtual void  visitWindowFrameFollowing(const WindowFrameFollowing *node, void * data) = 0;
  virtual void  visitSelect(const Select *node, void * data) = 0;
  virtual void  visitSelectList(const SelectList *node, void * data) = 0;
  virtual void  visitSelectItem(const SelectItem *node, void * data) = 0;
  virtual void  visitStar(const Star *node, void * data) = 0;
  virtual void  visitQuerySpecification(const QuerySpecification *node, void * data) = 0;
  virtual void  visitWithClause(const WithClause *node, void * data) = 0;
  virtual void  visitCte(const Cte *node, void * data) = 0;
  virtual void  visitSetOperation(const SetOperation *node, void * data) = 0;
  virtual void  visitSubquery(const Subquery *node, void * data) = 0;
  virtual void  visitComparison(const Comparison *node, void * data) = 0;
  virtual void  visitBetween(const Between *node, void * data) = 0;
  virtual void  visitInPredicate(const InPredicate *node, void * data) = 0;
  virtual void  visitInvalueList(const InvalueList *node, void * data) = 0;
  virtual void  visitLike(const Like *node, void * data) = 0;
  virtual void  visitIsNull(const IsNull *node, void * data) = 0;
  virtual void  visitQuantifiedComparison(const QuantifiedComparison *node, void * data) = 0;
  virtual void  visitExists(const Exists *node, void * data) = 0;
  virtual void  visitIsDistinct(const IsDistinct *node, void * data) = 0;
  virtual void  visitInvervalQualifier(const InvervalQualifier *node, void * data) = 0;
  virtual void  visitNonSecondField(const NonSecondField *node, void * data) = 0;
  virtual void  visitSecondField(const SecondField *node, void * data) = 0;
  virtual void  visitNonSecondDateTimeField(const NonSecondDateTimeField *node, void * data) = 0;
  virtual void  visitLanguageClause(const LanguageClause *node, void * data) = 0;
  virtual void  visitArgumentList(const ArgumentList *node, void * data) = 0;
  virtual void  visitNamedArgument(const NamedArgument *node, void * data) = 0;
  virtual void  visitSetQuantifier(const SetQuantifier *node, void * data) = 0;
  virtual void  visitFilterClause(const FilterClause *node, void * data) = 0;
  virtual void  visitSortSpecificationList(const SortSpecificationList *node, void * data) = 0;
  virtual void  visitSortSpecification(const SortSpecification *node, void * data) = 0;
  virtual void  visitOrderingDirection(const OrderingDirection *node, void * data) = 0;
  virtual void  visitNullOrdering(const NullOrdering *node, void * data) = 0;
  virtual void  visitCreateSchema(const CreateSchema *node, void * data) = 0;
  virtual void  visitUnsuppoerted(const Unsuppoerted *node, void * data) = 0;
  virtual void  visitTableDefinition(const TableDefinition *node, void * data) = 0;
  virtual void  visitInsert(const Insert *node, void * data) = 0;
  virtual void  visitDirectSqlStatement(const DirectSqlStatement *node, void * data) = 0;
  virtual void  visitUseStatement(const UseStatement *node, void * data) = 0;
  virtual void  visitLambdaBody(const LambdaBody *node, void * data) = 0;
  virtual void  visitLambdaParams(const LambdaParams *node, void * data) = 0;
  virtual void  visitLimitClause(const LimitClause *node, void * data) = 0;
  virtual void  visitParameterizedType(const ParameterizedType *node, void * data) = 0;
  virtual void  visitMapType(const MapType *node, void * data) = 0;
  virtual void  visitTryExpression(const TryExpression *node, void * data) = 0;
  virtual void  visitCastExpression(const CastExpression *node, void * data) = 0;
  virtual ~SqlParserVisitor() { }
};
class SqlParserDefaultVisitor : public SqlParserVisitor {
public:
  virtual void  defaultVisit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const SimpleNode *node, void * data) {
    defaultVisit(node, data);
}
  virtual void  visitCompilationUnit(const CompilationUnit *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnaryExpression(const UnaryExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnsignedNumericLiteral(const UnsignedNumericLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCharStringLiteral(const CharStringLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitDateLiteral(const DateLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTimeLiteral(const TimeLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTimestampLiteral(const TimestampLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitIntervalLiteral(const IntervalLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitBooleanLiteral(const BooleanLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnsupported(const Unsupported *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitIdentifier(const Identifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTableName(const TableName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSchemaName(const SchemaName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCatalogName(const CatalogName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSchemaQualifiedName(const SchemaQualifiedName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitPredefinedType(const PredefinedType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRowType(const RowType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitArrayType(const ArrayType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFieldDefinition(const FieldDefinition *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitParenthesizedExpression(const ParenthesizedExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitBuiltinValue(const BuiltinValue *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNullLiteral(const NullLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitArrayLiteral(const ArrayLiteral *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitQualifiedName(const QualifiedName *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitGroupingOperation(const GroupingOperation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFunction(const WindowFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRowNumber(const RowNumber *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRankFunction(const RankFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNtileFunction(const NtileFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLeadOrLag(const LeadOrLag *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNullTreatment(const NullTreatment *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFirstOrLastValueFunction(const FirstOrLastValueFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNullIf(const NullIf *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCoalesce(const Coalesce *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCaseExpression(const CaseExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWhenClause(const WhenClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitElseClause(const ElseClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWhenOperand(const WhenOperand *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSearchedCaseOperand(const SearchedCaseOperand *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCastEpression(const CastEpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFieldReference(const FieldReference *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFunctionCall(const FunctionCall *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAggregationFunction(const AggregationFunction *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnused(const Unused *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLambda(const Lambda *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitArrayElement(const ArrayElement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAdd(const Add *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSubtract(const Subtract *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitMultiply(const Multiply *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitDivide(const Divide *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitMod(const Mod *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTimeZoneField(const TimeZoneField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitConcatenation(const Concatenation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAdditiveEpression(const AdditiveEpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitMultiplicativeExpression(const MultiplicativeExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitOrExpression(const OrExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAndExpression(const AndExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNotExpression(const NotExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitIsExpression(const IsExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRowExpression(const RowExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRowExression(const RowExression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitValues(const Values *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTableExpression(const TableExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFromClause(const FromClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCommaJoin(const CommaJoin *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitJoin(const Join *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTableSample(const TableSample *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAliasedTable(const AliasedTable *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitAlias(const Alias *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnnest(const Unnest *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitColumnNames(const ColumnNames *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitOnClause(const OnClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUsingClause(const UsingClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWhereClause(const WhereClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitGroupbyClause(const GroupbyClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitRollup(const Rollup *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCube(const Cube *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitGroupingSets(const GroupingSets *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitHavingClause(const HavingClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowSpecification(const WindowSpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitPartitionByClause(const PartitionByClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitOrderByClause(const OrderByClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFrameUnits(const WindowFrameUnits *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFrameExtent(const WindowFrameExtent *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnboundedPreceding(const UnboundedPreceding *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCurrentRow(const CurrentRow *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFramePreceding(const WindowFramePreceding *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFrameBetween(const WindowFrameBetween *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnboundedFollowing(const UnboundedFollowing *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWindowFrameFollowing(const WindowFrameFollowing *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSelect(const Select *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSelectList(const SelectList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSelectItem(const SelectItem *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitStar(const Star *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitQuerySpecification(const QuerySpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitWithClause(const WithClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCte(const Cte *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSetOperation(const SetOperation *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSubquery(const Subquery *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitComparison(const Comparison *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitBetween(const Between *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitInPredicate(const InPredicate *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitInvalueList(const InvalueList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLike(const Like *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitIsNull(const IsNull *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitQuantifiedComparison(const QuantifiedComparison *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitExists(const Exists *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitIsDistinct(const IsDistinct *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitInvervalQualifier(const InvervalQualifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNonSecondField(const NonSecondField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSecondField(const SecondField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNonSecondDateTimeField(const NonSecondDateTimeField *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLanguageClause(const LanguageClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitArgumentList(const ArgumentList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNamedArgument(const NamedArgument *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSetQuantifier(const SetQuantifier *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitFilterClause(const FilterClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSortSpecificationList(const SortSpecificationList *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitSortSpecification(const SortSpecification *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitOrderingDirection(const OrderingDirection *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitNullOrdering(const NullOrdering *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCreateSchema(const CreateSchema *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUnsuppoerted(const Unsuppoerted *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTableDefinition(const TableDefinition *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitInsert(const Insert *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitDirectSqlStatement(const DirectSqlStatement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitUseStatement(const UseStatement *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLambdaBody(const LambdaBody *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLambdaParams(const LambdaParams *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitLimitClause(const LimitClause *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitParameterizedType(const ParameterizedType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitMapType(const MapType *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitTryExpression(const TryExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visitCastExpression(const CastExpression *node, void * data) {
    defaultVisit(node, data);
  }
  ~SqlParserDefaultVisitor() { }
};
}
}
#endif
/* JavaCC - OriginalChecksum=0c633070e7b369af1b643ef0d353747a (do not edit this line) */
