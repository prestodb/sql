plugins {
    id 'java'
    id "ca.coglinc2.javacc" version "latest.release"
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.+'

    // for the ASCII Trees
    testImplementation 'hu.webarticum:tree-printer:+'

    // https://mvnrepository.com/artifact/com.google.inject/guice
    testImplementation 'com.google.inject:guice:5.1.0'

    // https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api
    testImplementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    // https://mvnrepository.com/artifact/io.airlift/log
    testImplementation 'io.airlift:log:206'

    // https://mvnrepository.com/artifact/io.airlift/configuration
    testImplementation 'io.airlift:configuration:206'

    // https://mvnrepository.com/artifact/io.airlift/bootstrap
    testImplementation 'io.airlift:bootstrap:206'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    testImplementation 'com.google.guava:guava:31.1-jre'

    // enforce latest version of JavaCC
    javacc 'net.java.dev.javacc:javacc:+'
}

java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
    failFast=true
    minHeapSize = "128m"
    maxHeapSize = "1G"
    jvmArgs << [
            '-Djunit.jupiter.execution.parallel.enabled=true',
            '-Djunit.jupiter.execution.parallel.config.strategy=dynamic',
            '-Djunit.jupiter.execution.parallel.mode.default=concurrent',
            //'-Xss=256k'
    ]
    filter {
        excludeTestsMatching("IT*")
        excludeTestsMatching("*IT")
        excludeTestsMatching("*ITCase")
    }

    finalizedBy check
}

tasks.register('optionalTests', Test) {
    useJUnitPlatform()

    description = 'Runs optional tests.'
    group = 'verification'

    shouldRunAfter test

    minHeapSize = "128m"
    maxHeapSize = "1G"
    jvmArgs << [
            '-Djunit.jupiter.execution.parallel.enabled=true',
            '-Djunit.jupiter.execution.parallel.config.strategy=dynamic',
            '-Djunit.jupiter.execution.parallel.mode.default=concurrent'
    ]
    filter {
        includeTestsMatching("IT*")
        includeTestsMatching("*IT")
        includeTestsMatching("*ITCase")
    }

    testLogging {
        events "passed"
    }
}

compileJavacc {
    arguments = [grammar_encoding: 'UTF-8', static: 'false' /*, java_template_type: 'modern'*/ ]
}
